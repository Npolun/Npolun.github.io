<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>SelfBlogForWyx</title>
    <link>http://wyxselfblog.cn/</link>
    
    <atom:link href="http://wyxselfblog.cn/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>emmmmm.......hello world?</description>
    <pubDate>Wed, 19 Apr 2023 16:27:25 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>尝试解决HEXO加载过慢的问题（采坑无数）</title>
      <link>http://wyxselfblog.cn/2023/04/19/hexo-SpeedUp/</link>
      <guid>http://wyxselfblog.cn/2023/04/19/hexo-SpeedUp/</guid>
      <pubDate>Wed, 19 Apr 2023 15:29:29 GMT</pubDate>
      
      <description>&lt;p&gt;前言&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;尝试解决HEXO加载过慢的问题（采坑无数），整的脑壳痛&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>前言</p><blockquote><p>尝试解决HEXO加载过慢的问题（采坑无数），整的脑壳痛</p></blockquote><span id="more"></span><h1 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h1><blockquote><p>HEXO部署在github，由于github是国外的网站，所以加载速度很慢，尤其体现在加载图片过慢。</p></blockquote><h1 id="关键技术"><a href="#关键技术" class="headerlink" title="关键技术"></a>关键技术</h1><p><strong>hexo  gulp</strong></p><h1 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h1><p>一、尝试双线程加载。使用coding或gitee双线程加载</p><p>二、利用gulp压缩文件，提高加载效率</p><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><h2 id="尝试一：双线程加载。使用coding或gitee双线程加载"><a href="#尝试一：双线程加载。使用coding或gitee双线程加载" class="headerlink" title="尝试一：双线程加载。使用coding或gitee双线程加载"></a>尝试一：双线程加载。使用coding或gitee双线程加载</h2><blockquote><p>先说结果吧，这种方法行不通。下面说一下部署的过程。</p></blockquote><p>coding生成仓库，部署ssh，都没啥没问题，但是在生成pages时候出现很大问题。</p><p>首先，coding被腾讯云收购，原本生成pages的选项在“持续部署”下面，现在，居然放到了腾讯云里面。</p><p>而且还是收费的？？？？</p><p>收费也可以啊，后续在进行部署的时候，Jenkinsfile代码编译一直过不去</p><p>我也是醉了，，，，</p><p>coding被改什么什么鬼样子了</p><p>不愧是鹅厂</p><p>后面尝试gitee+github双线程加载</p><p>部署成功后，依然很慢</p><p>果断放弃双线程</p><h2 id="尝试二：利用gulp压缩资源文件，提高加载速度"><a href="#尝试二：利用gulp压缩资源文件，提高加载速度" class="headerlink" title="尝试二：利用gulp压缩资源文件，提高加载速度"></a>尝试二：利用gulp压缩资源文件，提高加载速度</h2><blockquote><p>这里也采坑无数，真的是脑壳痛~</p></blockquote><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>gulp工具通过压缩public文件中的html、css、js、image等静态资源，通过压缩这些静态资源，可以减少请求的数据量从而达到优化博客访问速度的目的。</p><h3 id="流程（建议看完所有的内容再操作，可以避免很多坑）"><a href="#流程（建议看完所有的内容再操作，可以避免很多坑）" class="headerlink" title="流程（建议看完所有的内容再操作，可以避免很多坑）"></a>流程（建议看完所有的内容再操作，可以避免很多坑）</h3><p>安装gulp</p><p>cmd运行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp -g</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看版本</span></span><br><span class="line">gulp -v</span><br></pre></td></tr></table></figure><blockquote><p>注意，cmd要管理员运行，不然会被拒绝访问</p></blockquote><p>在站点根目录下安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp --save</span><br><span class="line">npm install gulp-minify-css --save</span><br><span class="line">npm install gulp-uglify --save</span><br><span class="line">npm install gulp-htmlmin --save</span><br><span class="line">npm install gulp-htmlclean --save</span><br><span class="line">npm install gulp-imagemin --save</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解决【Gulp打包问题】 GulpUglifyError: unable to minify JavaScript</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解决 gulp-uglify 压缩JavaScript 不兼容 es5 语法的问题</span></span><br><span class="line">npm install babel-core@6.26.3 --save</span><br><span class="line">npm install gulp-babel@7.0.1 --save</span><br><span class="line">npm install babel-preset-es2015@6.24.1 --save</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gulp-babel 取消严格模式方法(<span class="string">&quot;use strict&quot;</span>)</span></span><br><span class="line">npm install babel-plugin-transform-remove-strict-mode --save</span><br></pre></td></tr></table></figure><p>在 Hexo 站点根目录下新建<code>gulpfile.js</code>文件，文件内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">&#x27;gulp-minify-css&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">&#x27;gulp-uglify&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlmin&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlclean&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-imagemin&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> babel = <span class="built_in">require</span>(<span class="string">&#x27;gulp-babel&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩css文件</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-css&#x27;</span>, <span class="keyword">function</span> (<span class="params">done</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/**/*.css&#x27;</span>)</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">minifycss</span>())</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>));</span><br><span class="line">    <span class="title function_">done</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩html文件</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-html&#x27;</span>, <span class="keyword">function</span> (<span class="params">done</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/**/*.html&#x27;</span>)</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">htmlclean</span>())</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">htmlmin</span>(&#123;</span><br><span class="line">            <span class="attr">removeComments</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">minifyJS</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">minifyCSS</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">minifyURLs</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;))</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>));</span><br><span class="line">    <span class="title function_">done</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩js文件</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-js&#x27;</span>, <span class="keyword">function</span> (<span class="params">done</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>([<span class="string">&#x27;./public/**/*.js&#x27;</span>, <span class="string">&#x27;!./public/**/*.min.js&#x27;</span>])</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">babel</span>(&#123;</span><br><span class="line">            <span class="comment">//将ES6代码转译为可执行的JS代码</span></span><br><span class="line">            <span class="attr">presets</span>: [<span class="string">&#x27;es2015&#x27;</span>] <span class="comment">// es5检查机制</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">uglify</span>())</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>));</span><br><span class="line">    <span class="title function_">done</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public/images 目录内图片(Version&lt;3)</span></span><br><span class="line"><span class="comment">// gulp.task(&#x27;minify-images&#x27;, function () &#123;</span></span><br><span class="line"><span class="comment">//     gulp.src(&#x27;./public/images/**/*.*&#x27;)</span></span><br><span class="line"><span class="comment">//         .pipe(imagemin(&#123;</span></span><br><span class="line"><span class="comment">//             optimizationLevel: 5, //类型：Number  默认：3  取值范围：0-7（优化等级）</span></span><br><span class="line"><span class="comment">//             progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片</span></span><br><span class="line"><span class="comment">//             interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染</span></span><br><span class="line"><span class="comment">//             multipass: false, //类型：Boolean 默认：false 多次优化svg直到完全优化</span></span><br><span class="line"><span class="comment">//         &#125;))</span></span><br><span class="line"><span class="comment">//         .pipe(gulp.dest(&#x27;./public/images&#x27;));</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public/images 目录内图片(Version&gt;3)</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-images&#x27;</span>, <span class="keyword">function</span> (<span class="params">done</span>) &#123;</span><br><span class="line">    gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/images/**/*.*&#x27;</span>)</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">imagemin</span>([</span><br><span class="line">            imagemin.<span class="title function_">gifsicle</span>(&#123;<span class="attr">interlaced</span>: <span class="literal">true</span>&#125;),</span><br><span class="line">            imagemin.<span class="title function_">jpegtran</span>(&#123;<span class="attr">progressive</span>: <span class="literal">true</span>&#125;),</span><br><span class="line">            imagemin.<span class="title function_">optipng</span>(&#123;<span class="attr">optimizationLevel</span>: <span class="number">5</span>&#125;),</span><br><span class="line">            imagemin.<span class="title function_">svgo</span>(&#123;</span><br><span class="line">                <span class="attr">plugins</span>: [</span><br><span class="line">                    &#123;<span class="attr">removeViewBox</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">                    &#123;<span class="attr">cleanupIDs</span>: <span class="literal">false</span>&#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;)</span><br><span class="line">        ]))</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public/images&#x27;</span>));</span><br><span class="line">    <span class="title function_">done</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.0以前的写法 </span></span><br><span class="line"><span class="comment">//gulp.task(&#x27;default&#x27;, [</span></span><br><span class="line"><span class="comment">//  &#x27;minify-html&#x27;, &#x27;minify-css&#x27;, &#x27;minify-js&#x27;, &#x27;minify-images&#x27;</span></span><br><span class="line"><span class="comment">//]);</span></span><br><span class="line"><span class="comment">//4.0以后的写法</span></span><br><span class="line"><span class="comment">// 执行 gulp 命令时执行的任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;default&#x27;</span>, gulp.<span class="title function_">series</span>(gulp.<span class="title function_">parallel</span>(<span class="string">&#x27;minify-html&#x27;</span>, <span class="string">&#x27;minify-css&#x27;</span>, <span class="string">&#x27;minify-js&#x27;</span>, <span class="string">&#x27;minify-images&#x27;</span>)), <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----------gulp Finished----------&quot;</span>);</span><br><span class="line">    <span class="comment">// Do something after a, b, and c are finished.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>同在根目录，创建<code>.babelrc</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&#x27;presets&#x27;</span>: [<span class="string">&#x27;es2015&#x27;</span>],</span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>: [<span class="string">&quot;transform-remove-strict-mode&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，原来的三部曲变成：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">gulp</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h3 id="采坑"><a href="#采坑" class="headerlink" title="采坑"></a>采坑</h3><h4 id="①gulp-imagemin-报错"><a href="#①gulp-imagemin-报错" class="headerlink" title="①gulp-imagemin 报错"></a>①gulp-imagemin 报错</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Error [ERR_REQUIRE_ESM]: require() of ES Module D:\Blog\node_modules\gulp-imagemin\index.js from D:\Blog\gulpfile.js not supported.</span><br><span class="line"></span><br><span class="line">Instead change the require of index.js in D:\Blog\gulpfile.js to a dynamic import() which is available in all CommonJS modules.</span><br><span class="line">    at Object.&lt;anonymous&gt; (D:\Blog\gulpfile.js:11:16)</span><br><span class="line">    at async Promise.all (index 0) &#123;</span><br><span class="line">  code: &#x27;ERR_REQUIRE_ESM&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一开始以为是gulpfile.js中语法错误，尝试了如下方法：</p><p>STEP1: 将<strong>gulpfile.js</strong>改为<strong>gulpfile.mjs</strong>，在<strong>package.json</strong>中加入<code>&quot;type&quot;: &quot;module&quot;</code>，这样可以让gulpfile按ES6的语法解析。</p><p>STEP2: 将gulpfile中所有的的require按ES6语法替换为import，如将<code>const gulp = require(&#39;gulp&#39;)</code>，替换为<code>import gulp from &#39;gulp&#39;</code>。</p><p>但是，还是不行！报错：imagemin.jpegtran is not a function</p><p>后来，我重新看一下报错，只有这个gulp-imagemin出问题了，其他的没有出问题。说明不是语法的问题。</p><p>然后将刚才的修改回溯了</p><p>尝试后，发现是gulp-imagemin版本太高的原因。</p><p>尝试降低版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D gulp-imagemin@xxx</span><br></pre></td></tr></table></figure><p>还是报错~</p><p>后来发现，是因为我用的npm，npm确实会有这个问题（具体原因，我也不知道），换成cnpm就好了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装cnpm（淘宝镜像）</span></span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">要在站点根目录下安装</span></span><br><span class="line">cnpm install gulp-imagemin --save-dev</span><br></pre></td></tr></table></figure><h4 id="②gulp报错Did-you-forget-to-signal-async-completion"><a href="#②gulp报错Did-you-forget-to-signal-async-completion" class="headerlink" title="②gulp报错Did you forget to signal async completion?"></a>②gulp报错Did you forget to signal async completion?</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[23:22:51] The following tasks did not complete: default, &lt;parallel&gt;, minify-js</span><br><span class="line">[23:22:51] Did you forget to signal async completion?</span><br></pre></td></tr></table></figure><p>翻译一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[23:22:51] 以下任务没有完成: default, &lt;parallel&gt;, minify-js</span><br><span class="line">[23:22:51] 你是否忘记发送异步完成信号?</span><br></pre></td></tr></table></figure><p>网上大多数给出的都是用async 和 await，例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引用gulp模块</span></span><br><span class="line">const gulp = require(&#x27;gulp&#x27;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行的是下面的代码，而不是整个文件</span></span><br><span class="line"><span class="comment">// 使用gulp.task 建立任务</span></span><br><span class="line"><span class="comment">// 1.任务的名称</span></span><br><span class="line"><span class="comment">// 2.任务的回调函数</span></span><br><span class="line">gulp(&#x27;first&#x27;<span class="punctuation">,</span>async() =&gt; <span class="punctuation">&#123;</span></span><br><span class="line">    console.log(<span class="string">&quot;人生中的第一个gulp任务执行完毕&quot;</span>);</span><br><span class="line">    <span class="comment">// 1.使用gulp.src获取要处理的文件</span></span><br><span class="line">    gulp.src(&#x27;./src/css/base.css&#x27;)</span><br><span class="line">    <span class="comment">// 通过pipe方法处理base.css文件</span></span><br><span class="line">    <span class="comment">// pipe方法里面写的是 如何处理代码  </span></span><br><span class="line">        .pipe(gulp.dest(&#x27;dist/css&#x27;));  <span class="comment">// 把base.css复制到dist/css文件夹中</span></span><br><span class="line"><span class="punctuation">&#125;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>改成：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引用gulp模块</span></span><br><span class="line">const gulp = require(&#x27;gulp&#x27;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行的是下面的代码，而不是整个文件</span></span><br><span class="line"><span class="comment">// 使用gulp.task 建立任务</span></span><br><span class="line"><span class="comment">// 1.任务的名称</span></span><br><span class="line"><span class="comment">// 2.任务的回调函数</span></span><br><span class="line">gulp.task(&#x27;first&#x27;<span class="punctuation">,</span>async() =&gt; <span class="punctuation">&#123;</span></span><br><span class="line">    await console.log(<span class="string">&quot;人生中的第一个gulp任务执行完毕&quot;</span>);</span><br><span class="line">    <span class="comment">// 1.使用gulp.src获取要处理的文件</span></span><br><span class="line">    gulp.src(&#x27;./src/css/base.css&#x27;)</span><br><span class="line">    <span class="comment">// 通过pipe方法处理base.css文件</span></span><br><span class="line">    <span class="comment">// pipe方法里面写的是 如何处理代码  </span></span><br><span class="line">        .pipe(gulp.dest(&#x27;dist/css&#x27;));  <span class="comment">// 把base.css复制到dist/css文件夹中</span></span><br><span class="line"><span class="punctuation">&#125;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是没用啊！</p><p>尝试各种改法无果后，索性把gulpfile.js代码中的done、async 和 await都去掉了，，，，，，然后就成功了~</p><p>如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">&#x27;gulp-minify-css&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">&#x27;gulp-uglify&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlmin&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlclean&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-imagemin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩html</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-html&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/**/*.html&#x27;</span>)</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">htmlclean</span>())</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">htmlmin</span>(&#123;</span><br><span class="line">            <span class="attr">removeComments</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">minifyJS</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">minifyCSS</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">minifyURLs</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;))</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩css</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-css&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/**/*.css&#x27;</span>)</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">minifycss</span>(&#123;</span><br><span class="line">            <span class="attr">compatibility</span>: <span class="string">&#x27;ie8&#x27;</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩js</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-js&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/js/**/*.js&#x27;</span>)</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">uglify</span>())</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩图片</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-images&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/images/**/*.*&#x27;</span>)</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">imagemin</span>(</span><br><span class="line">        [imagemin.<span class="title function_">gifsicle</span>(&#123;<span class="string">&#x27;optimizationLevel&#x27;</span>: <span class="number">3</span>&#125;), </span><br><span class="line">        imagemin.<span class="title function_">jpegtran</span>(&#123;<span class="string">&#x27;progressive&#x27;</span>: <span class="literal">true</span>&#125;), </span><br><span class="line">        imagemin.<span class="title function_">optipng</span>(&#123;<span class="string">&#x27;optimizationLevel&#x27;</span>: <span class="number">7</span>&#125;), </span><br><span class="line">        imagemin.<span class="title function_">svgo</span>()],</span><br><span class="line">        &#123;<span class="string">&#x27;verbose&#x27;</span>: <span class="literal">true</span>&#125;))</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public/images&#x27;</span>))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 默认任务【gulp4写法】</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;default&#x27;</span>,gulp.<span class="title function_">parallel</span>( <span class="string">&#x27;minify-html&#x27;</span>,<span class="string">&#x27;minify-css&#x27;</span>,<span class="string">&#x27;minify-js&#x27;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h1><blockquote><p>虽然没有CDN加速和双线程加载，只用gulp压缩了资源文件，加载速度还是有显著提升的！</p></blockquote><h1 id="待改进"><a href="#待改进" class="headerlink" title="待改进"></a>待改进</h1><blockquote><p>后续尝试取消google字体加载，进一步加快加载速度</p></blockquote>]]></content:encoded>
      
      
      <category domain="http://wyxselfblog.cn/categories/HEXO/">HEXO</category>
      
      
      <category domain="http://wyxselfblog.cn/tags/HEXO/">HEXO</category>
      
      
      <comments>http://wyxselfblog.cn/2023/04/19/hexo-SpeedUp/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>通过pyqt开发出一款答题的软件</title>
      <link>http://wyxselfblog.cn/2023/04/19/pyqt-anwserquestion/</link>
      <guid>http://wyxselfblog.cn/2023/04/19/pyqt-anwserquestion/</guid>
      <pubDate>Tue, 18 Apr 2023 20:57:39 GMT</pubDate>
      
      <description>&lt;p&gt;前言&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过pyqt开发出一款答题的软件。&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>前言</p><blockquote><p>通过pyqt开发出一款答题的软件。</p></blockquote><span id="more"></span><h1 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h1><blockquote><p>在学习了pyqt 的基础知识后，尝试制作一款可以答题的可视化程序。</p></blockquote><h1 id="关键技术"><a href="#关键技术" class="headerlink" title="关键技术"></a>关键技术</h1><p><strong>python pyqt</strong></p><h1 id="项目流程"><a href="#项目流程" class="headerlink" title="项目流程"></a>项目流程</h1><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><p>①构思样式图，完成界面设置，设置简单的槽函数</p><p>②解决多界面互动问题</p><p>③优化</p><h2 id="第一步：构思样式图，完成界面设置，设置简单的槽函数"><a href="#第一步：构思样式图，完成界面设置，设置简单的槽函数" class="headerlink" title="第一步：构思样式图，完成界面设置，设置简单的槽函数"></a>第一步：构思样式图，完成界面设置，设置简单的槽函数</h2><blockquote><p>构思样式图。为上下结构。上部为“问题描述”，下部为“选项”。</p><p>如下代码为例：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Ui_MainWindow</span>(<span class="title class_ inherited__">Object</span>):<span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QGroupBox, QVBoxLayout, QHBoxLayout, QRadioButton</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyWindow</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.init_ui()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_ui</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 最外层的垂直布局，包含两部分：爱好和性别</span></span><br><span class="line">        container = QVBoxLayout()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># -----创建第1个组，添加多个组件-----</span></span><br><span class="line">        <span class="comment"># hobby 主要是保证他们是一个组。</span></span><br><span class="line">        hobby_box = QGroupBox(<span class="string">&quot;爱好&quot;</span>)</span><br><span class="line">        <span class="comment"># v_layout 保证三个爱好是垂直摆放</span></span><br><span class="line">        v_layout = QVBoxLayout()</span><br><span class="line">        btn1 = QRadioButton(<span class="string">&quot;抽烟&quot;</span>)</span><br><span class="line">        btn2 = QRadioButton(<span class="string">&quot;喝酒&quot;</span>)</span><br><span class="line">        btn3 = QRadioButton(<span class="string">&quot;烫头&quot;</span>)</span><br><span class="line">        <span class="comment"># 添加到v_layout中</span></span><br><span class="line">        v_layout.addWidget(btn1)</span><br><span class="line">        v_layout.addWidget(btn2)</span><br><span class="line">        v_layout.addWidget(btn3)</span><br><span class="line">        <span class="comment"># 把v_layout添加到hobby_box中</span></span><br><span class="line">        hobby_box.setLayout(v_layout)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># -----创建第2个组，添加多个组件-----</span></span><br><span class="line">        <span class="comment"># 性别组</span></span><br><span class="line">        gender_box = QGroupBox(<span class="string">&quot;性别&quot;</span>)</span><br><span class="line">        <span class="comment"># 性别容器</span></span><br><span class="line">        h_layout = QHBoxLayout()</span><br><span class="line">        <span class="comment"># 性别选项</span></span><br><span class="line">        btn4 = QRadioButton(<span class="string">&quot;男&quot;</span>)</span><br><span class="line">        btn5 = QRadioButton(<span class="string">&quot;女&quot;</span>)</span><br><span class="line">        <span class="comment"># 追加到性别容器中</span></span><br><span class="line">        h_layout.addWidget(btn4)</span><br><span class="line">        h_layout.addWidget(btn5)</span><br><span class="line">        <span class="comment"># 添加到 box中</span></span><br><span class="line">        gender_box.setLayout(h_layout)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 把爱好的内容添加到容器中</span></span><br><span class="line">        container.addWidget(hobby_box)</span><br><span class="line">        <span class="comment"># 把性别的内容添加到容器中</span></span><br><span class="line">        container.addWidget(gender_box)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置窗口显示的内容是最外层容器</span></span><br><span class="line">        self.setLayout(container)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">    w = MyWindow()</span><br><span class="line">    w.show()</span><br><span class="line"></span><br><span class="line">    app.<span class="built_in">exec</span>()</span><br></pre></td></tr></table></figure><blockquote><p>设置槽函数</p><p>选到某个选项，就弹出对应的窗口，选到错误的甚至可以结束程序。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RadioDemo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,parent=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(RadioDemo,self).__init__(parent)</span><br><span class="line">        <span class="comment">#水平布局</span></span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        self.btn1=QRadioButton(<span class="string">&#x27;A:正确答案&#x27;</span>)</span><br><span class="line">        <span class="comment">#默认选中btn1</span></span><br><span class="line">        self.btn1.setChecked(<span class="literal">True</span>)</span><br><span class="line">        <span class="comment">#toggled信号与槽函数绑定</span></span><br><span class="line">        self.btn1.toggled.connect(<span class="keyword">lambda</span> :self.btnstate(self.btn1))</span><br><span class="line">        layout.addWidget(self.btn1)</span><br><span class="line"></span><br><span class="line">        self.btn2 = QRadioButton(<span class="string">&#x27;B：错误答案&#x27;</span>)</span><br><span class="line">        self.btn2.toggled.connect(<span class="keyword">lambda</span>: self.btnstate(self.btn2))</span><br><span class="line">        layout.addWidget(self.btn2)</span><br><span class="line"></span><br><span class="line">        self.btn3 = QRadioButton(<span class="string">&#x27;C：不知道&#x27;</span>)</span><br><span class="line">        self.btn3.toggled.connect(<span class="keyword">lambda</span>: self.btnstate(self.btn3))</span><br><span class="line">        layout.addWidget(self.btn3)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;RadioButton demo&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">btnstate</span>(<span class="params">self, btn</span>):</span><br><span class="line">    <span class="comment">#输出按钮1与按钮2的状态，选中还是没选中</span></span><br><span class="line">        <span class="keyword">if</span> btn.text()==<span class="string">&#x27;A:正确答案&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> btn.isChecked()==<span class="literal">True</span>:</span><br><span class="line">                msg_box = QMessageBox(QMessageBox.Warning, <span class="string">&#x27;正确&#x27;</span>, <span class="string">&#x27;回答正确！&#x27;</span>)</span><br><span class="line">                msg_box.exec_()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> btn.text()==<span class="string">&quot;B：错误答案&quot;</span>:</span><br><span class="line">            <span class="keyword">if</span> btn.isChecked() == <span class="literal">True</span>:</span><br><span class="line">                msg_box = QMessageBox(QMessageBox.Warning, <span class="string">&#x27;错误&#x27;</span>, <span class="string">&#x27;回答错误！结束程序！&#x27;</span>)</span><br><span class="line">                msg_box.exec_()</span><br><span class="line">                app = QApplication.instance()</span><br><span class="line">                app.quit()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> btn.text()==<span class="string">&quot;C：不知道&quot;</span>:</span><br><span class="line">            <span class="keyword">if</span> btn.isChecked() == <span class="literal">True</span>:</span><br><span class="line">                msg_box = QMessageBox(QMessageBox.Warning, <span class="string">&#x27;错误&#x27;</span>, <span class="string">&#x27;这都不知道？！再见！&#x27;</span>)</span><br><span class="line">                msg_box.exec_()</span><br><span class="line">                app = QApplication.instance()</span><br><span class="line">                app.quit()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第二步：解决多界面互动问题"><a href="#第二步：解决多界面互动问题" class="headerlink" title="第二步：解决多界面互动问题"></a>第二步：解决多界面互动问题</h2><blockquote><p>可以采用抽屉结构。在底部添加，“上一题”、“下一题”按钮。但是这种设计不够极简。</p><p>我们放弃这种结构。去掉多余的按钮。选了选项后，直接进入下一题，或结束程序。</p></blockquote><blockquote><p>main.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Created by: PyQt5 UI code generator 5.13.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># WARNING! All changes made in this file will be lost!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore, QtGui, QtWidgets</span><br><span class="line"><span class="keyword">from</span> question_1 <span class="keyword">import</span> question1</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow, QDialog</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> pyqtSignal, QEventLoop</span><br><span class="line"><span class="keyword">from</span> qt_material <span class="keyword">import</span> apply_stylesheet</span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> Qt</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AdminPage</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">        widget = QtWidgets.QWidget()</span><br><span class="line">        apply_stylesheet(self.app, theme=<span class="string">&#x27;dark_cyan.xml&#x27;</span>)</span><br><span class="line">        self.Form = <span class="literal">None</span></span><br><span class="line">        self.setupUi(widget)</span><br><span class="line">        widget.show()</span><br><span class="line">        sys.exit(self.app.exec_())</span><br><span class="line">        <span class="comment"># self.app.exec_()</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setupUi</span>(<span class="params">self, Form</span>):</span><br><span class="line">        self.Form = Form</span><br><span class="line">        self.Form.setObjectName(<span class="string">&quot;Form&quot;</span>)</span><br><span class="line">        self.Form.resize(<span class="number">455</span>, <span class="number">525</span>)</span><br><span class="line">        self.Form.setWindowFlags(Qt.Qt.CustomizeWindowHint)  <span class="comment"># 去掉标题栏的代码</span></span><br><span class="line">        <span class="comment">#最外层布局</span></span><br><span class="line">        self.allLayout = QtWidgets.QVBoxLayout(self.Form)</span><br><span class="line">        <span class="comment">#问题容器</span></span><br><span class="line">        self.questionBox = QtWidgets.QGroupBox(self.Form)<span class="comment">#相当于container</span></span><br><span class="line">        <span class="comment">#容器为垂直布局</span></span><br><span class="line">        self.questionLayout = QtWidgets.QVBoxLayout(self.questionBox)</span><br><span class="line">        <span class="comment">#选项容器</span></span><br><span class="line">        self.choseBox = QtWidgets.QGroupBox(self.Form)  <span class="comment"># 相当于container</span></span><br><span class="line">        <span class="comment"># 容器为垂直布局</span></span><br><span class="line">        self.anwserLayout = QtWidgets.QVBoxLayout(self.choseBox)</span><br><span class="line">        <span class="comment">#第一个盒子</span></span><br><span class="line">        self.question = QtWidgets.QLabel(<span class="string">&quot;如果您准备就绪，可以点击下方开始按钮，进行答题。&quot;</span>, self.questionBox)</span><br><span class="line">        self.questionLayout.addWidget(self.question)<span class="comment">#添加到垂直布局</span></span><br><span class="line">        <span class="comment">#第二个盒子</span></span><br><span class="line">        self.begain = QtWidgets.QPushButton(self.choseBox)<span class="comment">#盒子</span></span><br><span class="line">        self.begain.setObjectName(<span class="string">&quot;begain&quot;</span>)   <span class="comment">#名字</span></span><br><span class="line">        self.anwserLayout.addWidget(self.begain)<span class="comment">#添加到垂直布局</span></span><br><span class="line">        self.allLayout.addWidget(self.questionBox)</span><br><span class="line">        self.allLayout.addWidget(self.choseBox)</span><br><span class="line">        <span class="comment"># 开始答题按钮</span></span><br><span class="line">        self.begain.clicked.connect(<span class="keyword">lambda</span>: self.question_1())</span><br><span class="line">        self.retranslateUi()</span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(self.Form)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">question_1</span>(<span class="params">self</span>):</span><br><span class="line">        self.Form.hide()<span class="comment">#本界面隐藏</span></span><br><span class="line">        dialog1 = QtWidgets.QDialog()</span><br><span class="line">        begain_1 = question1()</span><br><span class="line">        begain_1.setupUi(dialog1)</span><br><span class="line">        dialog1.show()<span class="comment">#展示新的界面</span></span><br><span class="line">        dialog1.exec_()</span><br><span class="line">        self.Form.show()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">retranslateUi</span>(<span class="params">self</span>):</span><br><span class="line">        _translate = QtCore.QCoreApplication.translate</span><br><span class="line">        self.Form.setWindowTitle(_translate(<span class="string">&quot;self.Form&quot;</span>, <span class="string">&quot;测试器&quot;</span>))</span><br><span class="line">        self.begain.setText(_translate(<span class="string">&quot;Form&quot;</span>, <span class="string">&quot;开始答题&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    obj = AdminPage()</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>question_1.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Created by: PyQt5 UI code generator 5.13.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># WARNING! All changes made in this file will be lost!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore, QtGui, QtWidgets</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow, QDialog, QRadioButton, QMessageBox</span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> Qt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> question_2 <span class="keyword">import</span> question2</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">question1</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setupUi</span>(<span class="params">self, question1</span>):</span><br><span class="line">        self.Form = question1</span><br><span class="line">        self.Form.setObjectName(<span class="string">&quot;Form&quot;</span>)</span><br><span class="line">        self.Form.resize(<span class="number">455</span>, <span class="number">525</span>)</span><br><span class="line">        _translate = QtCore.QCoreApplication.translate</span><br><span class="line">        self.Form.setWindowTitle(_translate(<span class="string">&quot;self.Form&quot;</span>, <span class="string">&quot;好友测试器&quot;</span>))</span><br><span class="line">        self.Form.setWindowFlags(Qt.Qt.CustomizeWindowHint)  <span class="comment"># 去掉标题栏的代码</span></span><br><span class="line">        <span class="comment"># 最外层布局</span></span><br><span class="line">        self.allLayout = QtWidgets.QVBoxLayout(self.Form)</span><br><span class="line">        <span class="comment"># 问题容器</span></span><br><span class="line">        self.questionBox = QtWidgets.QGroupBox(self.Form)  <span class="comment"># 相当于container</span></span><br><span class="line">        <span class="comment"># 容器为垂直布局</span></span><br><span class="line">        self.questionLayout = QtWidgets.QVBoxLayout(self.questionBox)</span><br><span class="line">        <span class="comment"># 选项容器</span></span><br><span class="line">        self.choseBox = QtWidgets.QGroupBox(self.Form)  <span class="comment"># 相当于container</span></span><br><span class="line">        <span class="comment"># 容器为垂直布局</span></span><br><span class="line">        self.anwserLayout = QtWidgets.QVBoxLayout(self.choseBox)</span><br><span class="line">        <span class="comment"># 第一个盒子</span></span><br><span class="line">        self.question = QtWidgets.QLabel(<span class="string">&quot;问题一：XXXXXXX？&quot;</span>, self.questionBox)</span><br><span class="line">        self.questionLayout.addWidget(self.question)  <span class="comment"># 添加到垂直布局</span></span><br><span class="line">        <span class="comment"># 第二个盒子</span></span><br><span class="line">        self.buttonA = QRadioButton(<span class="string">&#x27;A：A&#x27;</span>, self.choseBox)<span class="comment">#盒子</span></span><br><span class="line">        self.buttonB = QRadioButton(<span class="string">&#x27;B：B&#x27;</span>, self.choseBox)<span class="comment">#盒子</span></span><br><span class="line">        self.buttonC = QRadioButton(<span class="string">&#x27;C：不知道&#x27;</span>, self.choseBox)<span class="comment">#盒子</span></span><br><span class="line">        self.anwserLayout.addWidget(self.buttonA)  <span class="comment"># 添加到垂直布局</span></span><br><span class="line">        self.anwserLayout.addWidget(self.buttonB)  <span class="comment"># 添加到垂直布局</span></span><br><span class="line">        self.anwserLayout.addWidget(self.buttonC)  <span class="comment"># 添加到垂直布局</span></span><br><span class="line">        self.allLayout.addWidget(self.questionBox)</span><br><span class="line">        self.allLayout.addWidget(self.choseBox)</span><br><span class="line">        <span class="comment"># 默认选中btnA</span></span><br><span class="line">        <span class="comment"># self.buttonA.setChecked(True)</span></span><br><span class="line">        self.buttonA.toggled.connect(<span class="keyword">lambda</span>: self.btnstate(self.buttonA))</span><br><span class="line">        self.buttonB.toggled.connect(<span class="keyword">lambda</span>: self.btnstate(self.buttonB))</span><br><span class="line">        self.buttonC.toggled.connect(<span class="keyword">lambda</span>: self.btnstate(self.buttonC))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">btnstate</span>(<span class="params">self, btn</span>):</span><br><span class="line">        <span class="keyword">if</span> btn.text()==<span class="string">&#x27;A：A&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> btn.isChecked()==<span class="literal">True</span>:</span><br><span class="line">                msg_box = QMessageBox(QMessageBox.Warning, <span class="string">&#x27;错误&#x27;</span>, <span class="string">&#x27;回答错误！再见！&#x27;</span>)</span><br><span class="line">                msg_box.exec_()</span><br><span class="line">                app = QApplication.instance()</span><br><span class="line">                app.quit()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> btn.text()==<span class="string">&quot;B：B&quot;</span>:   <span class="comment">#回答正确进入下一个界面</span></span><br><span class="line">            <span class="keyword">if</span> btn.isChecked() == <span class="literal">True</span>:</span><br><span class="line">                self.Form.hide()</span><br><span class="line">                dialog1 = QtWidgets.QDialog()</span><br><span class="line">                begain = question2()</span><br><span class="line">                begain.setupUi(dialog1)</span><br><span class="line">                dialog1.show()</span><br><span class="line">                dialog1.exec_()</span><br><span class="line">                self.Form.show()</span><br><span class="line">        <span class="keyword">if</span> btn.text()==<span class="string">&quot;C：不知道&quot;</span>:</span><br><span class="line">            <span class="keyword">if</span> btn.isChecked() == <span class="literal">True</span>:</span><br><span class="line">                msg_box = QMessageBox(QMessageBox.Warning, <span class="string">&#x27;错误&#x27;</span>, <span class="string">&#x27;这你都不知道！即将结束测试！再见！&#x27;</span>)</span><br><span class="line">                msg_box.exec_()</span><br><span class="line">                app = QApplication.instance()</span><br><span class="line">                app.quit()</span><br></pre></td></tr></table></figure><h2 id="第三步：优化"><a href="#第三步：优化" class="headerlink" title="第三步：优化"></a>第三步：优化</h2><blockquote><p>去掉标题栏</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> Qt</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.Form.setWindowFlags(Qt.Qt.CustomizeWindowHint)  <span class="comment"># 去掉标题栏的代码</span></span><br></pre></td></tr></table></figure><blockquote><p>利用qt_material进行主题设置。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qt_material <span class="keyword">import</span> apply_stylesheet</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply_stylesheet(self.app, theme=<span class="string">&#x27;dark_cyan.xml&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>qt_material自带了很多的主题，可以通过方法 <code>list_themes</code> 来查看。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x27;dark_amber.xml&#x27;, </span><br><span class="line">&#x27;dark_blue.xml&#x27;, </span><br><span class="line">&#x27;dark_cyan.xml&#x27;, </span><br><span class="line">&#x27;dark_lightgreen.xml&#x27;, </span><br><span class="line">&#x27;dark_pink.xml&#x27;, </span><br><span class="line">&#x27;dark_purple.xml&#x27;, </span><br><span class="line">&#x27;dark_red.xml&#x27;, </span><br><span class="line">&#x27;dark_teal.xml&#x27;, </span><br><span class="line">&#x27;dark_yellow.xml&#x27;, </span><br><span class="line">&#x27;light_amber.xml&#x27;, </span><br><span class="line">&#x27;light_blue.xml&#x27;, </span><br><span class="line">&#x27;light_blue_500.xml&#x27;, </span><br><span class="line">&#x27;light_cyan.xml&#x27;, </span><br><span class="line">&#x27;light_cyan_500.xml&#x27;, </span><br><span class="line">&#x27;light_lightgreen.xml&#x27;, </span><br><span class="line">&#x27;light_lightgreen_500.xml&#x27;, </span><br><span class="line">&#x27;light_orange.xml&#x27;, </span><br><span class="line">&#x27;light_pink.xml&#x27;, </span><br><span class="line">&#x27;light_pink_500.xml&#x27;, </span><br><span class="line">&#x27;light_purple.xml&#x27;, </span><br><span class="line">&#x27;light_purple_500.xml&#x27;, </span><br><span class="line">&#x27;light_red.xml&#x27;, </span><br><span class="line">&#x27;light_red_500.xml&#x27;, </span><br><span class="line">&#x27;light_teal.xml&#x27;, </span><br><span class="line">&#x27;light_teal_500.xml&#x27;, </span><br><span class="line">&#x27;light_yellow.xml&#x27;</span><br></pre></td></tr></table></figure><h2 id="可优化之处"><a href="#可优化之处" class="headerlink" title="可优化之处"></a>可优化之处</h2><blockquote><p>①弹窗全部使用的QMessageBox.Warning。使用其他类型均会出现程序卡死，问题尚待解决</p><p>②打包生成的exe太大，程序起步运行太慢。下次应在虚拟环境进行打包</p><p>③使用的主题，不太符合预期。应学习如何自己调整各种参数。</p><p>④多界面互动的问题，仍可寻求其他方法。</p></blockquote>]]></content:encoded>
      
      
      <category domain="http://wyxselfblog.cn/categories/%E9%A1%B9%E7%9B%AE/">项目</category>
      
      
      <category domain="http://wyxselfblog.cn/tags/PYTHON/">PYTHON</category>
      
      
      <comments>http://wyxselfblog.cn/2023/04/19/pyqt-anwserquestion/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>解决pyqt运行报错&#39;MainWindow&#39; object has no attribute &#39;show&#39;</title>
      <link>http://wyxselfblog.cn/2023/04/13/pyqt-MainFunction/</link>
      <guid>http://wyxselfblog.cn/2023/04/13/pyqt-MainFunction/</guid>
      <pubDate>Wed, 12 Apr 2023 21:12:49 GMT</pubDate>
      
      <description>&lt;p&gt;前言&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;解决pyqt运行报错’MainWindow’ object has no attribute ‘show’&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>前言</p><blockquote><p>解决pyqt运行报错’MainWindow’ object has no attribute ‘show’</p></blockquote><span id="more"></span><h1 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h1><blockquote><p>运行ui文件对应py文件，加入主函数后报错：’MainWindow’ object has no attribute ‘show’</p></blockquote><h1 id="关键技术"><a href="#关键技术" class="headerlink" title="关键技术"></a>关键技术</h1><p><strong>python pyqt</strong></p><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><p>由<code>designer</code>设计界面，并将<code>.ui</code>转为<code>.py</code>后直接在<code>main</code>函数中进行调用时不行的，可以修改<code>main</code>函数。</p><blockquote><p>将原始的</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Ui_MainWindow</span>(<span class="title class_ inherited__">Object</span>):</span><br></pre></td></tr></table></figure><blockquote><p>换成</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Ui_MainWindow</span>(QtWidgets.QMainWindow):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.setupUi(self)</span><br></pre></td></tr></table></figure><blockquote><p>修改mian函数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)<span class="comment">#初始化app</span></span><br><span class="line">    MainWindow = QtWidgets.QMainWindow()<span class="comment">#创建主窗口</span></span><br><span class="line">    ui = Ui_MainWindow()<span class="comment">#创建UI界面</span></span><br><span class="line">    ui.setupUi(MainWindow)<span class="comment">#初始化UI到主窗口，主要是建立代码与ui之间的signal与slot</span></span><br><span class="line">    MainWindow.show()<span class="comment">#显示窗口</span></span><br><span class="line">    sys.exit(app.exec_())<span class="comment">#消息循环结束之后返回0，接着调用sys.exit(0)退出程序</span></span><br></pre></td></tr></table></figure><blockquote><p>另外需要import   QtWidgets</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication</span><br></pre></td></tr></table></figure><blockquote><p>亲测有效！</p></blockquote>]]></content:encoded>
      
      
      <category domain="http://wyxselfblog.cn/categories/%E9%A1%B9%E7%9B%AE/">项目</category>
      
      
      <category domain="http://wyxselfblog.cn/tags/PYTHON/">PYTHON</category>
      
      
      <comments>http://wyxselfblog.cn/2023/04/13/pyqt-MainFunction/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>hexo-d弹窗账号密码问题</title>
      <link>http://wyxselfblog.cn/2023/04/13/hexo-d_UsernameAndPassword/</link>
      <guid>http://wyxselfblog.cn/2023/04/13/hexo-d_UsernameAndPassword/</guid>
      <pubDate>Wed, 12 Apr 2023 17:09:50 GMT</pubDate>
      
      <description>&lt;p&gt;前言&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;hexo-d会有2次弹窗，但是账号密码总是忘记，所以用此文记录一下&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>前言</p><blockquote><p>hexo-d会有2次弹窗，但是账号密码总是忘记，所以用此文记录一下</p></blockquote><span id="more"></span><h1 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h1><blockquote><p>hexo-d会有2次弹窗，但是账号密码总是忘记，所以用此文记录一下</p></blockquote><h1 id="关键技术"><a href="#关键技术" class="headerlink" title="关键技术"></a>关键技术</h1><p><strong>hexo  token</strong></p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>hexo-d会有两次弹窗，但是输入github账号密码总是报错。</p><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><p>第一次是输入github用户名（或者邮箱）和密码</p><p>第二次是输入github用户名和token</p><blockquote><p>这个有点小坑，总是忘记，特发此文记录记录一下</p></blockquote>]]></content:encoded>
      
      
      <category domain="http://wyxselfblog.cn/categories/HEXO/">HEXO</category>
      
      
      <category domain="http://wyxselfblog.cn/tags/HEXO/">HEXO</category>
      
      
      <comments>http://wyxselfblog.cn/2023/04/13/hexo-d_UsernameAndPassword/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>PYTHON-造数</title>
      <link>http://wyxselfblog.cn/2023/04/12/python_creat_data/</link>
      <guid>http://wyxselfblog.cn/2023/04/12/python_creat_data/</guid>
      <pubDate>Wed, 12 Apr 2023 06:25:38 GMT</pubDate>
      
      <description>&lt;p&gt;前言&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;利用PYTHON按规定概率生成数据，并保存到EXCEL&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>前言</p><blockquote><p>利用PYTHON按规定概率生成数据，并保存到EXCEL</p></blockquote><span id="more"></span><h1 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h1><blockquote><p>本项目尝试利用PYTHON按规定概率生成数据，方便后续进行数据分析</p></blockquote><h1 id="关键技术"><a href="#关键技术" class="headerlink" title="关键技术"></a>关键技术</h1><p><strong>numpy  xlwt</strong></p><h1 id="项目流程"><a href="#项目流程" class="headerlink" title="项目流程"></a>项目流程</h1><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><p>首先利用numpy进行造数，再利用xlwt将数据保存到EXCEL</p><blockquote><p>import module</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br></pre></td></tr></table></figure><blockquote><p>设置总数据条数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">600</span>   <span class="comment">#总计600条数据</span></span><br></pre></td></tr></table></figure><blockquote><p>需要生成的数值为1,2,3,4</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#初始化</span></span><br><span class="line">num = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="built_in">list</span> = []   </span><br></pre></td></tr></table></figure><blockquote><p>利用random.choice产生随机数，如下：</p><p>num为数值的范围，即：随机抽取1，2，3，4</p><p>size：每次抽取数值的个数</p><p>replace:如果一次抽取多个数值，是否可以重复？例如size&#x3D;2，replace&#x3D;True，则可能抽取到2个相同的数字；如果size&#x3D;2，replace&#x3D;False，则这两个数字必然不会相同</p><p>p：生成每个数值的概率。p&#x3D;None表示每个数值的概率相同。p&#x3D;[0.1, 0.52, 0.26, 0.12]，生成1，2，，3，4的概率依次为：0.1，0.52，0.26，0.12。注意这些概率相加必须为1，不然会报错</p><p>append是在list后添加一个新的数值，expend是在list后衔接另一个链表</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count):</span><br><span class="line">    a = np.random.choice(num, size=<span class="number">1</span>, replace=<span class="literal">True</span>, p=[<span class="number">0.1</span>, <span class="number">0.52</span>, <span class="number">0.26</span>, <span class="number">0.12</span>])</span><br><span class="line">    list1.append(<span class="built_in">int</span>(a))</span><br></pre></td></tr></table></figure><blockquote><p>写入文件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">workbook = xlwt.Workbook(encoding = &#x27;utf-8&#x27;)                  #设置一个workbook，其编码是utf-8</span><br><span class="line">worksheet = workbook.add_sheet(&quot;test_sheet&quot;)                  #新增一个sheet</span><br><span class="line">worksheet.write(0,0,label=&#x27;生成的随机数&#x27;)                      #将‘生成的随机数’作为标题，0，0：第0行第0列的表格</span><br><span class="line">for i in range(count):</span><br><span class="line">worksheet.write(i + 1, 0, label=list1[i])       #将生成的数据依次填入</span><br><span class="line"></span><br><span class="line">workbook.save(r&quot;D:\python_workspace\create_data\test_data.xls&quot;) #这里save需要特别注意，文件格式只能是xls，不能是xlsx，不然会报错</span><br></pre></td></tr></table></figure><blockquote><p>上述生成效果大概如下</p></blockquote><table><thead><tr><th>生成的随机数</th></tr></thead><tbody><tr><td>1</td></tr><tr><td>2</td></tr><tr><td>3</td></tr><tr><td>4</td></tr></tbody></table><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><blockquote><p>上述只是生成的简单的数据，那么如果我想要以下的效果呢？</p><p>随机数范围1~10，每次生成的数据个数随机，生成数据不重复，并用逗号分隔</p></blockquote><table><thead><tr><th align="left">1,2,3,5,6,7,8,9,10</th></tr></thead><tbody><tr><td align="left">1,2,3,4,5,6,7,8,9,10</td></tr><tr><td align="left">1,3,4,5,8</td></tr><tr><td align="left">10</td></tr><tr><td align="left">2,6,9</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">num = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="built_in">list</span> = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count):</span><br><span class="line">    list_1 = []                                                     <span class="comment">#存储每一个生成的随机数</span></span><br><span class="line">    b = np.random.choice(num, size=<span class="number">1</span>, replace=<span class="literal">True</span>, p=<span class="literal">None</span>)         <span class="comment">#生成随机数个数</span></span><br><span class="line">    a = np.random.choice(num, size=<span class="built_in">int</span>(b), replace=<span class="literal">False</span>, p=<span class="literal">None</span>)   <span class="comment">#按照个数不重复生成随机数</span></span><br><span class="line">    a1 = np.sort(a)                      <span class="comment">#排序</span></span><br><span class="line">    list_1.append(a1)               <span class="comment">#填入list</span></span><br><span class="line">    <span class="built_in">list</span>.extend(list_1)            <span class="comment">#list衔接</span></span><br></pre></td></tr></table></figure><blockquote><p>写入EXCEL</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cleaner = (<span class="string">&#x27;,&#x27;</span>).join(<span class="built_in">str</span>(v) <span class="keyword">for</span> v <span class="keyword">in</span> list16[i])  <span class="comment"># 去掉空格以及[]，数据用逗号衔接。可以试试不加这个代码输出什么效果，就知道这行是做什么的了</span></span><br><span class="line">worksheet.write(i + <span class="number">1</span>, <span class="number">1</span>, label=<span class="built_in">str</span>(cleaner))    <span class="comment"># 写入每个表格</span></span><br></pre></td></tr></table></figure><h1 id="项目后续"><a href="#项目后续" class="headerlink" title="项目后续"></a>项目后续</h1><blockquote><p>后续计划使用生成数据，利用matplotlib绘制各种图表</p><p>并加入前端界面，实现交互式操作</p></blockquote>]]></content:encoded>
      
      
      <category domain="http://wyxselfblog.cn/categories/%E9%A1%B9%E7%9B%AE/">项目</category>
      
      
      <category domain="http://wyxselfblog.cn/tags/PYTHON/">PYTHON</category>
      
      
      <comments>http://wyxselfblog.cn/2023/04/12/python_creat_data/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>家庭财务管理系统</title>
      <link>http://wyxselfblog.cn/2023/01/06/FamilyEcnomicSystem/</link>
      <guid>http://wyxselfblog.cn/2023/01/06/FamilyEcnomicSystem/</guid>
      <pubDate>Thu, 05 Jan 2023 20:47:01 GMT</pubDate>
      
      <description>&lt;p&gt;前言&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从项目背景、项目职责、关键技术、项目产出等多个维度系统介绍基于数据库的“家庭财务管理系统”WEB开发项目&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>前言</p><blockquote><p>从项目背景、项目职责、关键技术、项目产出等多个维度系统介绍基于数据库的“家庭财务管理系统”WEB开发项目</p></blockquote><span id="more"></span><h1 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h1><blockquote><p>本项目是针对家庭收支不平衡的群体，通过 JS 编程语言与数据库技术结合，开发出的一套由<strong>登陆管理</strong>、<strong>家庭成员管理</strong>、<strong>家庭的收支账目管理</strong>和<strong>家庭成员的收支报告管理</strong>组成的，帮助家庭完成记账工作，并给予用户家庭成员的收支报告的<strong>家庭财务管理系统</strong></p></blockquote><h1 id="项目职责"><a href="#项目职责" class="headerlink" title="项目职责"></a>项目职责</h1><ol><li><p>担任项目负责人，督促小组成员推进项目进度</p></li><li><p>需求分析，基于业务需求，积极推动项目进展，及时完成业务需求；</p></li><li><p>数据库 E-R 图设计，部分后端代码编写， 整合代码，通路测试，功能点验收。</p></li></ol><h1 id="关键技术"><a href="#关键技术" class="headerlink" title="关键技术"></a>关键技术</h1><p><strong>PHP  JavaScript  Bootstrap  CSS  MySQL  SQL</strong></p><h1 id="项目产出"><a href="#项目产出" class="headerlink" title="项目产出"></a>项目产出</h1><h2 id="数据库设计与E-R图"><a href="#数据库设计与E-R图" class="headerlink" title="数据库设计与E-R图"></a>数据库设计与E-R图</h2><p>根据家庭财务管理系统的功能模块需求分析，设计如下一些数据项和数据结构，从而构建数据库各表。</p><blockquote><p>（1）用户信息：用户账号、用户名、用户密码。</p></blockquote><blockquote><p>（2）家庭成员信息：成员姓名、成员性别、成员年龄、成员家庭职务。</p></blockquote><blockquote><p>（3）家庭收入：收入类型、收入金额、收入时间。</p></blockquote><blockquote><p>（4）家庭支出：支出类型、收入金额、收入时间。</p></blockquote><p><strong>数据库E-R图如下图所示:</strong><br><img src="/2023/01/06/FamilyEcnomicSystem/ER.png" alt="ER"></p><h2 id="系统功能模块"><a href="#系统功能模块" class="headerlink" title="系统功能模块"></a>系统功能模块</h2><p><strong>系统功能如下图所示:</strong></p><p><img src="/2023/01/06/FamilyEcnomicSystem/system.png" alt="system"></p><h2 id="系统实现"><a href="#系统实现" class="headerlink" title="系统实现"></a>系统实现</h2><h3 id="注册界面"><a href="#注册界面" class="headerlink" title="注册界面"></a>注册界面</h3><p><img src="/2023/01/06/FamilyEcnomicSystem/register.png" alt="register"></p><h3 id="登录界面"><a href="#登录界面" class="headerlink" title="登录界面"></a>登录界面</h3><p><img src="/2023/01/06/FamilyEcnomicSystem/login.png" alt="login"></p><h3 id="主界面"><a href="#主界面" class="headerlink" title="主界面"></a>主界面</h3><p><img src="/2023/01/06/FamilyEcnomicSystem/main.png" alt="main"></p><h3 id="添加家庭成员界面"><a href="#添加家庭成员界面" class="headerlink" title="添加家庭成员界面"></a>添加家庭成员界面</h3><p><img src="/2023/01/06/FamilyEcnomicSystem/addperson.png" alt="addperson"></p><h3 id="添加收支记录界面"><a href="#添加收支记录界面" class="headerlink" title="添加收支记录界面"></a>添加收支记录界面</h3><p><img src="/2023/01/06/FamilyEcnomicSystem/addmoney.png" alt="addmoney"></p><h3 id="修改用户名密码界面"><a href="#修改用户名密码界面" class="headerlink" title="修改用户名密码界面"></a>修改用户名密码界面</h3><p><img src="/2023/01/06/FamilyEcnomicSystem/change.png" alt="change"></p><h3 id="收支报表界面"><a href="#收支报表界面" class="headerlink" title="收支报表界面"></a>收支报表界面</h3><p><img src="/2023/01/06/FamilyEcnomicSystem/inandout.png" alt="inandout"></p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><pre><code>&lt;?phpfunction create_connection()&#123;  $link = mysqli_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;123456&quot;)//连接数据库  or die(&quot;无法连接数据库: &quot; . mysqli_connect_error());`   mysqli_query($link, &quot;SET NAMES utf8&quot;);    return $link;&#125;function execute_sql($link, $database, $sql)&#123;  mysqli_select_db($link, $database)  or die(&quot;打开数据库失败 &quot; . mysqli_error($link));   $result = mysqli_query($link, $sql);//利用SQL语句获取数据库中结果`  return $result;  &#125;?&gt; </code></pre><h3 id="生成财务报表"><a href="#生成财务报表" class="headerlink" title="生成财务报表"></a>生成财务报表</h3><pre><code>//建立数据连接$link = create_connection();                                            //执行Select语句获取数据库数据$sql = &quot;SELECT * FROM family_out where family_out.user_id=&#39;$userid&#39;&quot;;//SQL语句进行查找$result = execute_sql($link, &quot;family_economic&quot;, $sql);while ($row = mysqli_fetch_object($result))&#123;  echo &quot;&lt;tbody&gt;&quot;;  echo &quot;&lt;tr&gt;&quot;;  echo &quot;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&quot;;//将家庭的支出项输出出来  echo &quot;&lt;td align=&#39;center&#39;&gt;$row-&gt;who&lt;/td&gt;&quot;;  echo &quot;&lt;td align=&#39;center&#39;&gt;$row-&gt;owhere&lt;/td&gt;&quot;;  echo &quot;&lt;td align=&#39;center&#39;&gt;$row-&gt;num&lt;/td&gt;&quot;;  echo &quot;&lt;/tr&gt;&quot;;  echo &quot;&lt;/tbody&gt;&quot;;&#125;</code></pre><h1 id="可优化之处"><a href="#可优化之处" class="headerlink" title="可优化之处"></a>可优化之处</h1><blockquote><p>由于实现该项目的时候js不是很熟练，所以项目中html、php、Js文件混杂。<br><br>实际上，PHP是完全可以嵌套在html文件和Js文件中的<br>甚至，完全可以用Js实现输入输出判断，php有些多余。<br>而且，由于存在php页面，所以在运行的时候，需要开启服务器。本项目采用的是phpstudy集成环境。<br><br>之后的优化，可以考虑完全采用Js落地。</p></blockquote>]]></content:encoded>
      
      
      <category domain="http://wyxselfblog.cn/categories/%E9%A1%B9%E7%9B%AE/">项目</category>
      
      
      <category domain="http://wyxselfblog.cn/tags/%E7%BD%91%E9%A1%B5%E5%BC%80%E5%8F%91/">网页开发</category>
      
      
      <comments>http://wyxselfblog.cn/2023/01/06/FamilyEcnomicSystem/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>解决HEXO图片加载问题</title>
      <link>http://wyxselfblog.cn/2023/01/06/PhotoQuestion/</link>
      <guid>http://wyxselfblog.cn/2023/01/06/PhotoQuestion/</guid>
      <pubDate>Thu, 05 Jan 2023 19:57:00 GMT</pubDate>
      
      <description>&lt;p&gt;前言&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文提供了解决HEXO图片加载问题的方案（亲测有效）&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>前言</p><blockquote><p>本文提供了解决HEXO图片加载问题的方案（亲测有效）</p></blockquote><span id="more"></span><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>切换到blog根目录，“ _<strong>config.yml</strong> ”文件中 <strong>post_asset_folder</strong> 后面的false改成<strong>true</strong>(注意空格)</p></li><li><p>在blog根目录运行<code>npm install https://github.com/xcodebuild/hexo-asset-image</code></p><p> <strong>注意：</strong>直接运行<code>install hexo-asset-image</code>是无效的，必须如上添加指定依赖地址</p></li><li><p>进入 <strong>Blog\source\_posts</strong> ，手动创建与页面同名的文件夹 </p><p> 例如文件名“<strong>test.md</strong>”,则创建名为“<strong>test</strong>”的文件夹（ <strong>文件夹用来存放图片</strong> ）</p></li><li><p>引用图片的方式 ! [图片名](. &#x2F; 文件夹名字 &#x2F; 图片名 . 图片后缀) </p><p> 例如：![test](. &#x2F; PhotoQuestion &#x2F; test.jpg)</p></li><li><p>最后，hexo三部曲，搞定！</p></li></ol><p><img src="/2023/01/06/PhotoQuestion/test.jpg" alt="test"></p>]]></content:encoded>
      
      
      <category domain="http://wyxselfblog.cn/categories/HEXO/">HEXO</category>
      
      
      <category domain="http://wyxselfblog.cn/tags/HEXO/">HEXO</category>
      
      
      <comments>http://wyxselfblog.cn/2023/01/06/PhotoQuestion/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>FirstBlog</title>
      <link>http://wyxselfblog.cn/2023/01/05/hello-world/</link>
      <guid>http://wyxselfblog.cn/2023/01/05/hello-world/</guid>
      <pubDate>Wed, 04 Jan 2023 19:25:46 GMT</pubDate>
      
      <description>&lt;p&gt;前言&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简单介绍一下利用HEXO和Github搭建私人博客的原理以及可能遇到的问题及解决方法&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>前言</p><blockquote><p>简单介绍一下利用HEXO和Github搭建私人博客的原理以及可能遇到的问题及解决方法</p></blockquote><span id="more"></span><h2 id="博客搭建原理？"><a href="#博客搭建原理？" class="headerlink" title="博客搭建原理？"></a>博客搭建原理？</h2><p>博客即是网页，我们大学做的网页开发，只能在本地计算机登录查看或者是局域网查看。想要使用万维网的人能够访问你的界面，就需要一台<strong>服务器</strong>和一个<strong>唯一的标识</strong>。</p><p>github可以解析静态网页，然后通过page功能生成网址，使得万维网的人可以访问，这就充当了服务器的功能。</p><p>其实唯一的标识在使用github page功能的时候，已经解决了。因为github用户名是唯一的，通过github page生成的网页链接也是全网唯一的。</p><p>然后需要需要解决静态网页的问题。</p><p>本次开发使用的是HEXO。</p><p><strong>HEXO</strong>是一个静态界面生成器，支持css, js，但是本地存储的网页文件是md文件不是html，所以经常使用以下两个命令 </p><blockquote><p>hexo g   &#x2F;&#x2F;生成网站静态文件到默认设置的 public 文件夹。 </p></blockquote><blockquote><p>hexo d   &#x2F;&#x2F;自动生成网站静态文件，并部署到设定的仓库。</p></blockquote><p>其实只要保证把html文件放到github对应的仓库就可以了，生成静态界面的工具有很多，不光有HEXO，还有VuePress等等。</p><p>甚至我们可以写网页然后放进来，都是可以的。</p><p>后续，如果不想用github的地址访问的话，可以购买一个域名，绑定一下。</p><p>到这里就可以用域名访问自己的网页了。</p><h2 id="使用HEXO搭建博客教程"><a href="#使用HEXO搭建博客教程" class="headerlink" title="使用HEXO搭建博客教程"></a>使用HEXO搭建博客教程</h2><ol><li><p><strong>教程链接</strong></p><blockquote><p>这篇文章真的是良心作品</p></blockquote><p> <a href="https://zhuanlan.zhihu.com/p/102592286">https://zhuanlan.zhihu.com/p/102592286</a></p><p> <em><strong>PS：</strong></em>建议每进入一步先看评论，可以提前避免很多错误</p></li><li><p><strong>问题</strong></p><p> 遇到最多的问题就是HEXO三部曲“spawn failed…”吧</p><p> 很多教程说是网络的问题，让我们搭梯子，实际搭了半天梯子也没用</p><p> 亲测下面的方法最有用：（直接暴力重开就完事了） </p><p> <strong>方法一</strong></p><p> ①删除blog根目录下的<em>“.deploy_git”</em>文件夹</p><p> ②运行</p><pre><code> git config --global core.autocrlf false</code></pre><p> ③运行三部曲</p><pre><code> hexo clean hexo g hexo d</code></pre><p> <strong>方法二</strong></p><p> ①删除blog根目录下的<em>“.deploy_git”</em>文件夹和<em>“public”</em>文件夹</p><p> ②运行三部曲</p><pre><code> hexo clean hexo g hexo d</code></pre><p> <em><strong>PS：</strong></em>如果一次不行，就多试几次~</p></li></ol>]]></content:encoded>
      
      
      <category domain="http://wyxselfblog.cn/categories/HEXO/">HEXO</category>
      
      
      <category domain="http://wyxselfblog.cn/tags/HEXO/">HEXO</category>
      
      
      <comments>http://wyxselfblog.cn/2023/01/05/hello-world/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
